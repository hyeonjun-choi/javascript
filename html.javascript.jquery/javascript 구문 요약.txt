@1.  Javascript 는 HTML 안에서 어디에 삽입되는가

//-----------------------------------------------
<script>
	자바 스크립트 코드;
</script>
//-----------------------------------------------
<script>~</script>의 위치 - 자스안에 함수 있을 시 - head 태그 안으로 삽입
                           자스안에 함수 없을 시 - 원하는 실행 위치에 삽입 

@2. 2개 이상의 html 안에서 동일한 자바 스크립트 코드를 자주 사용할 경우 
    자바 스크립트 코드의 유지보수가 힘들다.
    즉, 자스코드가 변경되면 모든 html을 열어서 자스 코드를 수정해야 한다.
    이에 대한 해결책은?

//------------------------------------------------
자스코드를 ~~~.js 파일에 저장 후 각 html에서 아래와 같이 수입
//------------------------------------------------
<script src = "~~~.js"></script>
//------------------------------------------------
~~~.js 파일 안의 모든 자스 코드를 script 안에 삽입.

@3. JavaScript 변수 선언 
- 이유 - 데이터를 변수에 저장(선언)함으로써 재 사용 가능
         저장하지 않을 시 데이터 재 사용 불가능
//------------------------------------------------
- 변수 선언 방식 => var 변수명 = 데이터;
//------------------------------------------------
▶변수 이름은 [영문], [숫자],  _ , $ 로 만 구성된다. 단, 영문 중 예약어 (var, if 등)은 불가능하다.
		▶<주의>변수명의 중간에 공백이 있으면 안 된다. 
		▶<참고>영문 대신 한글, 일어, 한자 등도 가능하나 영문을 사용한다.
		▶변수명의 첫 글자로 숫자가 올 수는 없다.
		▶변수명은 영문 대, 소문자를 구별한다.
		▶관용적 변수명 제작 규칙
			▶영문, 숫자, _ 로 구성한다.
			▶변수명의 첫 글자는 영문으로 시작한다.
			▶3자 이상으로 제작한다.<1,2글자 지양>
			▶변수명을 보고 저장되는 데이터의 종류를 알 수 있도록 의미 있게 준다. (=가독성 있게 준다)
		▶변수명 사용 불가능 예 
		    =>273alpha, has space
		    =>break, else, instanceof, true, case, false, new, try, catch, finally, null. typeof, continue, for, return, var, default, function, switch 등


//------------------------------------------------
매개변수 사용 예시
//------------------------------------------------
<예>function 함수명(매개변수){ 실행구문; }
▶<주의>매개변수 앞에는 절대 var를 붙이지 않는다. 에러발생

@4. 정적 함수(선언적 함수) - [함수명]을 붙여 선언하는 함수
    형태 --
//------------------------------------------------
function 함수명(매개변수) {
    실행구문;
    [return [반환값];]
}
//------------------------------------------------
			대괄호는 생략이 가능하다는 의미이다.
			매개변수는 0개 이상 나올수 있음. 2개 이상이라면 , 로 나열함.
			매개변수 왼쪽에 var 있으면 절대 안된다.

@5. 익명 함수 - [함수명]없이 선언하는 함수. 주로 데이터에 저장. 즉, 데이터의 한 종류
	형태 - 
//------------------------------------------------
function (매개변수) {
    실행구문;
    [return [반환값];]
}
//------------------------------------------------
			대괄호는 생략이 가능하다는 의미이다.
			매개변수는 0개 이상 나올수 있음. 2개 이상이라면 , 로 나열함.
			매개변수 왼쪽에 var 있으면 절대 안된다.

@6. 내장함수 종류 및 사용예
----------------
alert( "문자열" ) *****
----------------
	▶확인 버튼이 있는 [경고상자]를 보여 준다.
----------------
confirm( "문자열" ) *****
----------------
	▶확인 버튼과 취소 버튼이 있는 [경고상자]를 보여 준다.
	  [확인] 버튼 누르면 true 리턴, [취소] 버튼 누르면 false 리턴
----------------
prompt( "문자열" )
----------------
	▶[문자열입력상자]와 확인 버튼, 취소 버튼이 있는 상자를 보여주고 [확인] 버튼 누르면 입력문자열 리턴
---------------
parseInt( 숫자문자, 10 ) ****
----------------
	▶10진수로 표현된 [숫자문자]를 정수로 리턴.
	▶<참고>[숫자문자]가 실수인 경우 소수 첫째자리부터 모두 버림.
----------------
Number( 데이터 ) **
----------------
	▶데이터가 [숫자] 또는 [숫자문자]면 숫자 리턴 아니면 NaN 리턴.
	▶<주의>함수 이름이 대문자이다.
----------------
isNaN( 데이터 )
----------------
	▶데이터가 [숫자] 또는 [숫자문자]면 false 리턴, [순수문자]면 true 리턴.
	▶<참고> isNaN => not A Number
----------------
setInterval( "자스코딩", n초x1000 ) ****
setInterval( function(){자스코딩;} , n초x1000 ) ****
----------------
	▶n초 마다 자스코딩을 반복 실행한다. <주의>"자스코딩"에서 "를 빼면 안된다.
	▶익명함수 function(){자스코딩;} 는 n초 마다 필요해서 호출하고 있으므로 콜백함수이다
----------------
setTimeout( "자스코딩", n초x1000 ) ****
setTimeout( function(){자스코딩;} , n초x1000 ) ****
----------------
	▶n초 후에 자스코딩을 실행한다. 시한폭탄과 유사. <주의>"자스코딩"에서 "를 빼면 안된다.
	▶익명함수 function(){자스코딩;} 는 n초 마다 필요해서 호출하고 있으므로 콜백함수이다
----------------
typeof( 데이터 ) ***
----------------
	▶데이터의 자료형을 문자열로 리턴
	▶<예> typeof(3)	        => "number" 리턴
	▶<예> typeof( "햄버거" )       => "string" 리턴
	▶<예> typeof( function(){~})   => "function" 리턴
	▶<예> typeof( new Date() )	=> "object" 리턴
	▶<예> var xxx; typeof( xxx )	=> "undefined" 리턴
----------------
eval( "문자열" )
----------------
	▶문자열을 자바스크립트 실행 코드로 바꾸어 실행한다.
----------------
기타등등
----------------

~~ 중간 건너 뛰고 ~~

Array 객체 생성 데이터 저장 방법

