■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<1> JQuery란 무엇?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    공개적으로 개발되고 무료로 제공되는 [자바스크립트 사용자 정의 객체]의 이름
    <주의>프로그램 언어의 한 종류가 절대 아니다.
    <참고>누구나 버그 수정, 성능 향상 그리고 도움말 작성에 참여할 수 있다.
    <참고>http://plugins.jquery.com/ 에 광범위한 라이브러리(~.js)가 있으며, 꾸준히 업데이트되고 있고 
	        누구나 버그 수정，성능향상, 도움말 작성에 참여할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<2> JQuery란 무엇?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    ●디자이너, 퍼블리셔, 개발자 모두가 사용하기 편하고 강력한 기능을 가진 메소드를 제공한다.
    ●대부분의 브라우저에서 JQuery객체의 메소드를 호출하면 동일한 실행 결과를 생산한다.(=cross browsing)
    즉, 브라우저에 따라 다른 코딩을 할 필요가 없다.
    기존 자스 코딩은 브라우저에 따라 다른 결과를 산출하는 어려움이 있었다.
    한번의 코딩으로 모든 브라우저에서 같은 실행결과를 산출하는 것을 크로스 브라우징(=cross browsing)이라 한다.
    개발자들이 제일 싫어하는 작업 중의 하나.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<3> JQuery객체를 사용하기 위한 사전 작업은 무엇?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
----------------------------------------------------------
	●jquery-x.x.x.min.js 다운 받고 HTML의 head 태그에 아래와 같이 수입하는 코드를 작성한다. x 는 임의의 버전 번호이다.
	----------------------------------------------------------
		<script src="query-1.6.2.min.js" type="text/javascript"></script>
    ----------------------------------------------------------
	jquery-x.x.x.min.js  파일 안에는 JQuery 객체의 메위주를 리턴하는 jQuery 함수 또는 $ 함수가 존재하고
	JQuery 객체의 메소드나 속성변수가 선언되어 있다.
	----------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<4> JQuery객체의 메위주를 얻을려면 어떻게 합니까
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    jQuery("선택자") 함수 또는 $("선택자") 함수를 호출하여 얻는다.
	----------------------------------------------------------
    jQuery("선택자") 함수 또는 $("선택자") 함수는 jquery-x.x.x.min.js 파일 안에 존재한다.   
	----------------------------------------------------------
    <참고>JQuery 객체의 메위주를 얻어야 JQuery 객체의 메소드를 호출할 수 있다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<5> JQuery객체의 메위주를 얻고 메소드를 호출하는 형식
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    var xxx = $("선택자");       // $("선택자") 함수를 호출하여 얻은 JQuery객체의 메위주를 변수 
                                // xxx에 저장하기
    -------------------------------
    xxx.JQuery객체메소드명(~)   // JQuery 객체의 메소드 호출
    -------------------------------
    xxx.JQuery객체속성변수명    // JQuery 객체의 속성변수 호출

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<6> jQuery("선택자") 함수 또는 $("선택자") 함수 호출 시 선택자란?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    선택자(=selector)란? - 태그를 지칭하는 방법론을 말한다.
    JQuery객체는 태그를 관리하는 객체이므로 태그를 지칭하는 방법론이 여러 가지가 있다.
    //------------------------------------------------------------
    <예> var obj = $("[name=uid]");
    //------------------------------------------------------------
    <1> 변수 obj 선언
    <2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj저장
        이때 JQuery 객체는 name=uid를 가진 태그를 관리한다.
    //------------------------------------------------------------
    <예> var obj = $(".pwd");
    //------------------------------------------------------------
    <1> 변수 obj 선언
    <2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj저장
        이때 JQuery 객체는 class=pwd를 가진 태그를 관리한다.
    //------------------------------------------------------------
    <예> var obj = $("#addr");
    //------------------------------------------------------------
    <1> 변수 obj 선언
    <2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj저장
        이때 JQuery 객체는 id=addr를 가진 태그를 관리한다.
    //------------------------------------------------------------
    <예> var obj = $(".family.relation");
    //------------------------------------------------------------
    <1> 변수 obj 선언
    <2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj저장
        이때 JQuery 객체는 class=family를 가진 태그 후손 즉 내부에
                    class=relation 가진 태그 관리한다.
                ------------------------------------------------------
                <div class=family>
                    <span class=relation>블라 블라 블라</span>
                </div>
                <div class=employee>
                    <span class=relation>블라 블라 블라</span>
                </div>
                ------------------------------------------------------
    <예> var obj = $(".div");
    //------------------------------------------------------------
    <1> 변수 obj 선언
    <2> $ 함수를 호출하여 JQuery 객체의 메위주를 얻어 변수 obj저장
        이때 JQuery 객체는 div 태그를 관리한다.
        만약 div태그가 2개 이상이면 정말 2개 이상을 관리한다.

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<7> body 태그 안의 모든 태그를 읽어들인 이후 실행하고 싶은 코드가 있다.
    JQuery를 이용한다면 어떻게 코딩해야
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-----------------------------------------------------
$(document).ready(
    function(){
        body태그를 모두 읽어들인 후 실행할 코드
    }
)
-----------------------------------------------------
$(document).ready(function(){
    body태그를 모두 읽어들인 후 실행할 코드
})
-----------------------------------------------------

$(document) => $()함수 호출하여 JQuery 객체의 메위주를 얻는 코딩
                <주의>ready ????를 호출할려면 $ 함수 호출 시 매개변수로
                선택자를 넘겨주지 말고 document객체의 메위주를 넘겨준다.
                document 라는 변수는 개발자 만드는 변수가 아닌 
                이미 만들어져 있는 변수

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<8> <input type="button" value="로그인" class="login_btn"> 태그가 실행된 
 결과물인 버튼을 클릭하면 checkForm() 라는 함수를 호출하고 싶으면?
 즉 클릭 이벤트를 걸려면?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
$(".login_btn").ready(
    function(){
        checkForm();
    }
);
--------------------------------------------------
click( 익명함수 )   => JQuery 객체가 관리하는 태그에 클릭 이벤트가 발생하면
                      익명함수 안의 코딩을 실행하라.
--------------------------------------------------
선택자가 가르키는 태그에 클릭 이벤트가 발생하면 실행구문을 실행하기
--------------------------------------------------
$(".선택자").click(
    function(){
        실행구문();
    }
);
--------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<9> 아래 html 태그의 실행 결과에서 웹브라우저에 문자열 입력양식이 출력된다.
웹브라우저에서 아이디를 입력한 경우 입력된 아이디를 얻기 위한 JQuery 자원 코딩은?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
정답 1
var uid = $(".uid").val(); 

정답 2
var uid = $("[name='uid'].").val();

















■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<10> $(".xxx").val() 와 $(".xxx").val("") 의 차이점
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
$(".xxx").val()
    class=xxx 를 가진 태그의 value 값을 리턴하라는 의미
    <예> var uid = $(".uid").val();
$(".xxx").val("")
    class=xxx 를 가진 태그의 value 값을 ""로 세팅하라는 의미
    <예> $(".uid").val("");

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<11> JQuery 객체에서 선택자의 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
---------------------------------
$(".xxx")
---------------------------------
    calss="xxx"가진 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("#xxx")
---------------------------------
    id="xxx"가진 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("태그명")
---------------------------------
    <태그명 ~>을 가진 태그들을 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("*")
---------------------------------
    모든 선택자가 가리키는 태그를 관리하는 JQuery 객체 메위주 리턴하기
-----------------------------------------------
		<예>
		-----------------------------------------------
			-----------------------------------------------
			<form name="memRegForm">
				<input type="text" name="mem_id"  class="mem_id">
				<input type="text" name="mem_name" class="mem_name" >
				<input type="password" name="pwd"  class="pwd">
				<select name="addr" class="addr">
					<option value=" ">--선택요망--</option>
					<option value="서울">서울</option>
					<option value="경기">경기</option>
					<option value="인천">인천</option>
					<option value="기타">기타</option>
				</select>
			</form>
			-----------------------------------------------
			$("[name='memRegForm'] *")    
			-----------------------------------------------
				name="memRegForm" 가진 태그의 모든 후손 태그를 관리하는 JQuery 객체 리턴.

---------------------------------
$("선택자1 선택자2")      // 중간에 띄어쓰기 공백
---------------------------------
    선택자1이 가르키는 태그의 후손 중 선택자2가 가르키는 태그를 관리하는 JQuery 객체 리턴.
    중간에 공백은 후손을 의미한다.

---------------------------------
$("선택자1,선택자2")      
---------------------------------
    선택자1이 가르키는 태그와 선택자2가 가르키는 태그를 관리하는 JQuery 객체 리턴.
    
---------------------------------
$("선택자1>선택자2")      
---------------------------------
    선택자1이 가르키는 태그의 자식 중 선택자2가 가르키는 태그를 관리하는 JQuery 객체 리턴.

---------------------------------
$(".xxx:checked")      
---------------------------------
    calss="xxx" 가진 태그 중에 체크된 태그를 관리하는 JQuery 객체 메위주 리턴하기
    체크된 태그는 주로 radio 또는 checked 입력양식이다.

---------------------------------
$("선택자1 선택자2")
---------------------------------
    선택자1이 가르키는 태그의 후손 중에 선택자2가 가르키는 태그를 관리하는 JQuery 객체 메위주 리턴하기
        ---------------------------------
        <예>$(".xxx :checked")      
        ---------------------------------
            class="xxx" 가진 태그의 후손 중에 체크된 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("[태그속성명='속성값']")      
---------------------------------
    태그속성명='속성값'을 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
    <주의>[ 와 ] 가 있어야 한다.
        ---------------------------------
        <예> $("[name='mem_id']")
        ---------------------------------
            name='mem_id' 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
        ---------------------------------
        <예> $("[type='radio']")
        ---------------------------------
            type='radio'가진 태그, 즉 radio 입력양식 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("[태그속성명!='xxx']")      
---------------------------------
    태그속성명='xxx'을 안 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("[태그속성명^='xxx']")      
---------------------------------
    태그속성명='xxx~'을 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
    태그속성값으로 xxx로 시작하는 태그를 관리하는 JQuery 객체 메위주 리턴하기
        ---------------------------------
        <예> $("[name^='mem_']")
        ---------------------------------
            name='mem~' 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
            name 속성값이 mem_ 문자로 시작하는 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("[태그속성명$='xxx']")      
---------------------------------
    태그속성명='~xxx'을 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기
    태그속성값으로 xxx로 끝나는 태그를 관리하는 JQuery 객체 메위주 리턴하기
        ---------------------------------
        <예> $("[name$='name']")
        ---------------------------------
            name='~name' 가진 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("[태그속성명*='xxx']")      
---------------------------------
    태그속성값으로 xxx를 포함한 태그를 관리하는 JQuery 객체 리턴

---------------------------------
$("선택자:first")      
---------------------------------
    선택자가 가리키는 태그 중 첫 번째 태그를 관리하는 JQuery 객체 리턴
        ---------------------------------
        <예>$(".gender:first")
        ---------------------------------
            class='gender' 가진 태그 중에 첫번째 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("선택자:last")      
---------------------------------
    선택자가 가리키는 태그 중 마지막 태그를 관리하는 JQuery 객체 리턴
        ---------------------------------
        <예>$(".gender:last")
        ---------------------------------
            class='gender' 가진 태그 중에 마지막 태그를 관리하는 JQuery 객체 메위주 리턴하기

---------------------------------
$("선택자:odd")      
---------------------------------
    선택자가 가리키는 태그 중에 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 리턴
        ---------------------------------
        <예>$(".hobby:last")
        ---------------------------------
            <input type="checkbox" name="hobby" class="hobby" value="운동">운동
			<input type="checkbox" name="hobby" class="hobby" value="여행">여행
			<input type="checkbox" name="hobby" class="hobby" value="독서">독서
			<input type="checkbox" name="hobby" class="hobby" value="기타">기타
			----------------------
			class='hobby' 가진 태그 중에 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 메위주 리턴하기
			즉 여행과 기타 이다.

---------------------------------
$("선택자:even")      
---------------------------------
    선택자가 가리키는 태그 중에 인덱스 번호가 짝수인 태그를 관리하는 JQuery 객체 리턴
        ---------------------------------
        <예>$(".hobby:even")
        ---------------------------------
            <input type="checkbox" name="hobby" class="hobby" value="운동">운동
			<input type="checkbox" name="hobby" class="hobby" value="여행">여행
			<input type="checkbox" name="hobby" class="hobby" value="독서">독서
			<input type="checkbox" name="hobby" class="hobby" value="기타">기타
			----------------------
			class='hobby' 가진 태그 중에 인덱스 번호가 홀수인 태그를 관리하는 JQuery 객체 메위주 리턴하기
			즉 운동과 독서 이다.


선택자가 가리키는 태그가 없다? - 그렇더라도 JQuery객체는 무조건 생성된다.

---------------------------------
$("선택자:eq(i)")      
---------------------------------
    선택자가 가리키는 태그 중에 인덱스 번호가 i번째인 태그를 관리하는 JQuery객체 리턴
    i 는 0부터 시작하는 인덱스 번호가 들어간다.

---------------------------------
$("선택자:first-child")      
---------------------------------
    선택자가 가리키는 태그 중에 부모 태그가 있는 [첫번째] 태그를 관리하는 JQuery객체 리턴
        ---------------------------------
        $("student td:first-child")   
        // 여기서 student 는 부모가 아니다(부모는 각 tr태그)  
        ---------------------------------
    <table class="student">
        <tr>
            <td>사오정</td>
            <td>대리</td>
            <td>남</td>
        </tr>
        <tr>
            <td>저팔계</td>
            <td>과장</td>
            <td>여</td>
        </tr>
    </table>
    ---------------------------
    $(".student td:first-child") 
    ---------------------------
        class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 첫째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>사오정</td>  와 <td>저팔계</td> 태그를 관리하는 JQuery 객체 리턴된다.
    ---------------------------
    $(".student td:last-child") 
    ---------------------------
        class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 마지막 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>남</td>  와 <td>여</td> 태그를 관리하는 JQuery 객체 리턴된다.
    ---------------------------
    $(".student td:nth-child(2)") 특정 테이블안의 열을 골라낼 때 사용
    ---------------------------
        class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 2번째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>대리</td>  와 <td>과장</td> 태그를 관리하는 JQuery 객체 리턴된다.
    ---------------------------
    $(".student td:nth-child(odd)") 
    ---------------------------
        class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 순서번호가 홀수번째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>사오정</td> 와 <td>저팔계</td>, <td>남</td> 와 <td>여</td> 태그를 관리하는 JQuery 객체 리턴된다.
    ---------------------------
    $(".student td:nth-child(even)") 
    ---------------------------
        class=student 를 가진 태그의 후손 중에 td를 골라내라
		그리고 그 td 중에 각 td 의 부모 입장에서 순서번호가 짝수번째 자식에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>대리</td> 와 <td>과장</td> 태그를 관리하는 JQuery 객체 리턴된다.
    ---------------------------
    $(".student td:gt(2)") 
    ---------------------------
        class=student 를 가진 태그의 후손 중에 td를 골라내라
		순서번호가 2번째 놈 이후에 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>남</td> 와 <td>저팔계</td> 와 <td>과장</td> 와 <td>여</td> 태그를 관리하는 JQuery 객체 리턴된다.
    ----------------------
	$( ".student td:lt(2)" )
	---------------------- 
		class=student 를 가진 태그의 후손 중에 td를 골라내라
		순서번호가 2번째 놈 이전 해당하는 td 를 관리하는 JQuery 객체 리턴.
		결국 <td>사오정</td>  태그를 관리하는 JQuery 객체 리턴된다.

---------------------------------
$("선택자1:has(선택자2)")      
---------------------------------
    선택자1이 가르키는 태그 중에 후손으로 선택자2를 가진 선택자1를 관리하는 JQuery객체 생성

    <예>
    <div class="movie">
            <span class="action">삼국지</span>
    </div>
    <div class="movie">
            <span class="sf">인터스텔라</span>
    </div>
    <div class="movie">
            <span class="marvel">블랙위도우</span>
    </div>
    ---------------------------------
    $( ".movie:has(.marvel)")
    ---------------------------------
    clss=movie 를 가진 태그 중에 후손으로 class=marvel을 가진 태그를 골라 관리하는 JQuery 객체 리턴
    결국은 class=movie 를 가진 태그 중 3번째 div 태그를 관리하는 JQuery 객체 리턴

---------------------------------
$("선택자:contains('문자열')")      
---------------------------------
    선택자가 가르키는 태그 중에 '문자열' 내포하고 있는 태그를 관리하는 JQuery객체 리턴
    <주의>위에 $("선택자1:has(선택자2)") 와 헷갈리지 말것
    <예>
    <div class="movie">
            <span class="action">삼국지</span>
    </div>
    <div class="movie">
            <span class="sf">인터스텔라</span>
    </div>
    <div class="movie">
            <span class="marvel">블랙위도우</span>
    </div>
    ---------------------------------
    $( ".movie:contains('인터스텔라')")
    ---------------------------------
    clss=movie 를 가진 태그 중에 '인터스텔라'라는 문자열을 내포하고 있는 태그를 골라 관리하는 JQuery 객체 리턴
    결국은 class=movie 를 가진 태그 중 2번째 div 태그를 관리하는 JQuery 객체 리턴

---------------------------------
$("선택자1:not("선택자2")")      
---------------------------------
    선택자1이 가르키는 태그 중에 선택자2가 가르키는 태그가 아닌 태그를 관리하는 JQuery 객체 리턴
    <주의>위에 $("선택자1:has(선택자2)") 와 헷갈리지 말것
    <예>

    ---------------------------------
    <input type="checkbox" name="hobby" class="hobby" value="운동">운동
	<input type="checkbox" name="hobby" class="hobby" value="여행">여행
	<input type="checkbox" name="hobby" class="hobby" value="독서">독서
	<input type="checkbox" name="hobby" class="hobby" value="기타">기타
    ---------------------------------
    $( ".hobby:not(:checked)")
    ---------------------------------
        class=hobby 를 가진 태그 중에 체크되어 있지 않은 태그를 골라 관리하는 JQuery객체 리턴
    ---------------------------------
    $( ".hobby:checked")
    ---------------------------------
        class=hobby 를 가진 태그 중에 체크되어 있는 태그를 골라 관리하는 JQuery객체 리턴
    <예>
    IF("not)
    $( ".input:not([type=button])")
    input 태그 중에 type=button를 가진 태그를 뺀 나머지 태그르 관리하는 JQuery객체 리턴

---------------------------------
$(":text")      
---------------------------------
    type="text"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='text']")와 동일하다.

---------------------------------
$(":password")      
---------------------------------
    type="password"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='password']")와 동일하다.

---------------------------------
$(":checkbox")      
---------------------------------
    type="checkbox"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='checkbox']")와 동일하다.

---------------------------------
$(":file")      
---------------------------------
    type="file"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='file']")와 동일하다.

---------------------------------
$(":button")      
---------------------------------
    type="button"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='button']")와 동일하다.

---------------------------------
$(":submit")      
---------------------------------
    type="submit"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='submit']")와 동일하다.

---------------------------------
$(":reset")      
---------------------------------
    type="reset"를 가진 태그들을 관리하는 JQuery 객체 리턴.
    $("[type='reset']")와 동일하다.

---------------------------------
$(":checked")      
---------------------------------
    체크된 태그들을 관리하는 JQuery 객체 리턴.
    <참고>체크가 가능한 태그는 checked, radio HTML 입력양식이다.

---------------------------------
$(":focus")      
---------------------------------
    초점이 맞추어져 있는 태그들을 관리하는 JQuery 객체 리턴.

---------------------------------
$(":disabled")      
---------------------------------
    비활성화된 태그들을 관리하는 JQuery 객체 리턴

---------------------------------
$(":enabled")      
---------------------------------
    활성화된 태그들을 관리하는 JQuery 객체 리턴

---------------------------------
$(":visible")      
---------------------------------
    웹 화면에 보이는 태그들을 관리하는 JQuery 객체 리턴

---------------------------------
$(":hidden")      
---------------------------------
    웹 화면에 안 보이는 태그들을 관리하는 JQuery 객체 리턴


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<12> JQuery 객체에서 메소드의 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
---------------------------------
add("선택자")      
---------------------------------
    현재 JQuery 객체가 관리하는 태그에 [선택자]가 가리키는 태그도 포함하여 관리하는 JQuery객체 반환
    즉, [선택자1]이 가리키는 태그와 [선택자2]가 가리키는 태그를 관리하는 JQuery객체 반환

    ---------------------------------
    <예>
    ---------------------------------
    <input type="text" name="mem_name" class="mem_name">
    <input type="text" name="mem_id" class="mem_id">
    ---------------------------------
        var obj = $(".mem_name").add( ".mem_id" )
			-----------------------------------------------------
			obj에는 [선택자1]이 가리키는 태그와  [선택자2]가 가리키는 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
			위 코드는 아래 처럼도 가능하다
			----------------------------------
			var obj = $(".mem_name,.mem_id" )
			----------------------------------

---------------------------------
children("선택자")      
---------------------------------
    현재 JQuery객체가 관리하는 태그의 자식 중 [선택자]가 가리키는 태그를 관리하는 JQuery객체 반환
    ---------------------------------
    <예>
    ---------------------------------
    <div class="member">
        <input type="text" name="mem_name" class="mem_name">
        <div class="family">
                <input type="text" name="child_name" class="child_name">
        </div>
    </div>
    ---------------------------------
        ---------------------------------
        var obj = $(".member").children( ".mem_name" )
        ---------------------------------
            obj에는 class=member이 가리키는 태그의 자식중 class=mem_name 가리키는 태그를 관리하는
            JQuery객체의 메위주가 저장된다.
            위 코드는 아래 처럼도 가능하다
            ---------------------------------
			var obj = $(".member>.mem_name" )    -- > 부모 자식 찾을때 사용하는 기호, 앞 뒤로 공백 주지 말것

---------------------------------
parent( )      
---------------------------------
    현재 JQuery객체가 관리하는 태그의 부모 태그를 관리하는 JQuery 객체 반환.
    ---------------------------------
    <예>
    ---------------------------------
    <div class="member">
        <input type="text" name="mem_name" class="mem_name">
        <div class="family">
                <input type="text" name="child_name" class="child_name">
        </div>
    </div>
    ---------------------------------
        -----------------------------------------------------
		var obj = $(".mem_name").parent( )
		-----------------------------------------------------
			obj에는 class=mem_name 이 가리키는 태그의 부모 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
			즉 <div class="member"> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.

---------------------------------
parents( "선택자2" )      
---------------------------------
        현재 JQuery 객체가 관리하는 태그의 조상 태그 중에 선택자2가 가르키는 제일 가까운 태그를
        관리하는 JQuery 객체 반환.
       -----------------------------------------------------
		<예>
		-----------------------------------------------------
		<div class="aaa">
			<div class="xxx">
				<input type="text" name="mem_name" class="mem_name" >
				<span>
					<input type="text" name="child_name" class="child_name" >
				</span>
			</div>
		</div>
		-----------------------------------------------------
			-----------------------------------------------------
			var obj = $(".child_name").parents("div")
			-----------------------------------------------------
				obj에는 class=child_name 이 가리키는 태그의 조상 태그 중 제일 가까운 div 태그를 관리하는 
				JQuery 객체의 메위주가 저장된다.
				결국 <div class="xxx"> 태그를 관리하는  JQuery 객체의 메위주가 저장된다.

---------------------------------
filter( "선택자2" )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그 중에 선택자2가 가르키는 태그를 관리하는 JQuery 객체 반환

---------------------------------
find( "선택자2" )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 후손 중에 선택자2가 가르키는 태그를 관리하는 JQuery 객체 반환

---------------------------------
first( )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그 중에 첫번째 태그를 관리하는 JQuery 객체 반환

---------------------------------
last( )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그 중에 마지막 태그를 관리하는 JQuery 객체 반환

---------------------------------
next( )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그 다음에 나오는 형제 태그를 관리하는 JQuery 객체 반환
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
		<input type="text" name="mem_id" class="mem_id" >
		<input type="text" name="mem_name" class="mem_name" >	
		-----------------------------------------------------
        var obj = $(".mem_id").next();
		-----------------------------------------------------
            obj 에는 class=mem_id이 가리키는 태그의 다음 태그를 관리하는 JQuery
            객체의 메위주가 저장된다.
            결국 <input type="text" name="mem_name" class="mem_name" > 태그를
            관리하는 JQuery 객체의 메위주가 저장된다.

---------------------------------
nextAll( )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체 반환.
	<주의>형제란 같은 부모 밑에 있는 자식들을 말한다.
    <비유>내 밑에 있는 모든 동생
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div>
				<div>사오정</div>
				<div class=xxx>저팔계</div>
				<div>손오공</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			-----------------------------------------------------
			var obj = $(".xxx").nextAll();
			-----------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 다음에 나오는 모든 형제 
                태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>손오공</div>와 <div>삼장법사</div> 태그를 관리하는  
                JQuery 객체의 메위주가 저장된다.
            
            <주의>'형제' 태그란 표현에 주의할 것. 
            나 다음은 내 동생이지 내 자식이 아니다.

---------------------------------
prev( )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그 이전에 나오는 형제 태그를 관리하는 JQuery 객체 반환
    <비유>내 위 형, 언니
	    -----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div>
				<div>사오정</div>
				<div class=xxx>저팔계</div>
				<div>손오공</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			-----------------------------------------------------
			var obj = $(".xxx").prev();
			-----------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 이전에 나오는 모든 형제 
                태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>사오정</div> 태그를 관리하는  
                JQuery 객체의 메위주가 저장된다.
            
            <주의>'형제' 태그란 표현에 주의할 것. 
            나 다음은 내 동생이지 내 자식이 아니다.

---------------------------------
prevAll( )      
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 이전에 나오는 모든 형제 태그를 관리하는 JQuery 객체 반환.
	<비유>내 위에 있는 모든 형
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div>
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			-----------------------------------------------------
			var obj = $(".xxx").prevAll();
			-----------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 다음에 나오는 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>사오정</div> 와 <div>손오공</div>  태그를 관리하는  JQuery 객체의 메위주가 저장된다.

---------------------------------
eq(i)      
---------------------------------
    현재 JQuery 객체가 관리하는 태그 중에 '인덱스번호' i 번째 인 태그를 관리하는 JQuery 객체 반환.
    	-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div class="movie">
				<div>이도공간</div>
				<div>엑소시스트</div>
				<div>여고괴담</div>
				<div>컨저링</div>
			</div>
		-----------------------------------------------------
		var obj = $(".movie div").eq(2);
		-----------------------------------------------------
            obj에는 class=movie가 가리키는 태그의 후손 중 div태그 중 인덱스번호 2번인 태그를
            관리하는 JQuery 객체의 메위주가 저장된다.
            결국 <div>여고괴담</div> 태그를 관리하는 JQuery 객체의 메위주가 저장된다.                   
		    -----------------------------------------------------
            <참고> var obj = $(".movie div").eq(2); 아래 코드와 같다.
		    -----------------------------------------------------
                 var obj = $(".movie").find("div").eq(2);
                
---------------------------------
siblings( )     //s 무조건 들어감 주의
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 모든 형제 태그를 관리하는 JQuery 객체 반환
    <주의>모든 형제를 가리키므로 나는 빠진다
    <비유>나를 제외한 모든 형제
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div>
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			<div>
				<div>이순신</div>
				<div>권율</div>
				<div>이성계</div>
				<div>세종대왕</div>
			</div>
			-----------------------------------------------------
			var obj = $(".xxx").siblings();
			-----------------------------------------------------
				obj에는 class=xxx 가 가리키는 태그의 모든 형제 태그를 관리하는 JQuery 객체의 메위주가 저장된다.
				결국 <div>사오정</div> 와 <div>손오공</div> 와 <div>삼장법사</div>태그를 
                관리하는  JQuery 객체의 메위주가 저장된다.

---------------------------------
not(선택자)     
---------------------------------
    현재 JQuery 객체가 관리하는 태그 중에 선택자가 가르키는 태그가 아닌 태그를 관리하는 JQuery 객체 반환
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>
			-----------------------------------------------------
			var obj = $(".cartoon div").not(".xxx");
			-----------------------------------------------------    
                obj에는 class=cartoon이 가리키는 태그의 후손 중에 class=xxx 를 가지고 있지 않은 태그를 관리하는 JQuery 객체의
                메위주가 저장된다. 결국
                <div>사오정</div>, <div>손오공</div>, <div>삼장법사</div> 태그를
                관리하는 JQuery 객체의 메위주가 저장된다
                -----------------------------------------------------    
                <참고> var obj = $(".cartoon div").not(".xxx"); 아래 코드와 동일하다.
                -----------------------------------------------------    
                        var obj = $(".cartoon div:not(.xxx)");

---------------------------------
text( ) ***    
---------------------------------
    현재 JQuery 객체가 관리하는 태그가 끌어안고 있는 웹브라우저 출력 문자를 리턴한다. 
	JQuery 객체가 관리하는 태그가 끌어안고 있는 또 다른 태그는 리턴되지 않는다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class=xxx>저팔계</div>
    		-----------------------------------------------------
            var str = $(".xxx").text();
            -----------------------------------------------------
                str에는 class=xxx 가 가리키는 태그가 끌어안고 있는 문자가 저장되어 있다.
                결국 저팔계가 저장된다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class=xxx><div>저팔계</div></div>
    		-----------------------------------------------------
            var str = $(".xxx").text();
            -----------------------------------------------------
                 str에는 class=xxx 가 가리키는 태그가 끌어안고 있는 문자가 저장되어 있다.
                결국 저팔계가 저장된다.
                -----------------------------------------------------
                <주의> str에는 <div>저팔계</div> 저장되어 있지 않다.

---------------------------------
text("문자열") ***              --15
---------------------------------
    현재 JQuery 객체가 관리하는 태그 내부에 "문자열"을 덮어쓴다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class=xxx>저팔계</div>
    		-----------------------------------------------------
            $(".xxx").text("오세황");
            -----------------------------------------------------
                class=xxx가 가리키는 태그 내부에 오세황 이라는 문자를 덮어씌운다.
                결과적으로 <div class=xxx>저팔계</div> 가 <div class=xxx>오세황</div>
                으로 바뀜으로서 화면에 출력되는 저팔계가 오세황으로 바뀌어 보인다.
                <주의> 기존의 것을 덮어씌우는 형식이라 기존의 것이 없어질 수 있음

---------------------------------
html( ) ***     
---------------------------------
    현재 JQuery 객체가 관리하는 태그가 끌어안고 있는 모든 코딩을 문자열로 리턴한다.
    코디에는 문자열 또는 html 태그도 포함된다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class=xxx><div>저팔계</div></div>
    		-----------------------------------------------------
            var str = $(".xxx").html();
            -----------------------------------------------------
                str에는 class=xxx 가 가리키는 태그가 끌어안고 있는 모든 코딩을 문자로 저장되어 있다.
                결국 str에는 "<div>저팔계</div>" 가 문자열로 저장되어 있다.

---------------------------------
html("html태그도 포함할 수 있는 문자열")     
---------------------------------
    현재 JQuery 객체가 관리하는 태그 내부에 "html태그도 포함할 수 있는 문자열"을 덮어쓴다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class=xxx><div>저팔계</div></div>
    		-----------------------------------------------------
            $(".xxx").html( "<span>사오정</span>");
            -----------------------------------------------------
                class=xxx 가 가리키는 태그 안에 <span>사오정</span> 를 덮어씌우기.
                결국 "<div class=xxx><div>저팔계</div></div>" 는 
                <div class=xxx><span>사오정</span></div>로 바뀐다.

---------------------------------
val( )     
---------------------------------
   현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들이면 DOM 객체를 생성하게 되는데
   이때 이 DOM객체의 value 라는 속성변수  안의 값을 문자열로 리턴한다.
   주로 value 라는 속성변수를 가진 태그는 <input ~> 또는 <select ~> 또는 
   <Textarea ~>이다.

---------------------------------
val("문자열")                   --15,19
---------------------------------
    현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들이면 DOM 객체를 생성하게 되는데
		이때 DOM 객체의 value 라는 속성변수 안에   문자열   을 삽입한다
        -----------------------------------------------------
		<예>
        ----------------------------------------------------------------------------
		<form name="memRegForm">
			<input type="text" name="uid">
		</form>
		----------------------------------------------------------------------------
			위 html 을 웹브라우저가 읽어들이면 
			<input type="text" name="uid"> 태그는 Text 객체로 생성한다.
			그리고 이 Text 객체에 대응하는 입력양식이 웹브라우저 화면에 출력된다.
			이 상태에서 
			$(".uid").val("bravo"); 코드가 실행된다면 Text 객체의  value 속성변수 안의 값을 bravo 로 세팅하게 된다.
			그러므로 웹화면상에서도 입력양식에 bravo 가 입력되어 보인다.


    var str = $(".uid").val()       -> text 객체의 value 속성변수안의 값 리턴
    $(".uid").val("world");         -> text 객체의 value 속성변수안에 world 삽입

---------------------------------
append("html코드")                 --15,19
---------------------------------
    현재 JQuery 객체가 관리하는 태그 내부에 막내 자식으로 html코드를 삽입한다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class="movie">
                <div>컨저링</div>
                <div>쏘우</div>
            </div>
    		-----------------------------------------------------
            $(".xxx").append("<div>랑종</div>");
            -----------------------------------------------------
                class=movie가 가리키는 태그 안에 막내 자식으로 <div>랑종</div>
                를 삽입하기. 결국 아래 처럼 태그가 삽입된다.
            <div class="movie">
                <div>컨저링</div>
                <div>쏘우</div>
                <div>랑종</div>
            </div>

---------------------------------
prepend("html코드")             --15,19
---------------------------------
    현재 JQuery 객체가 관리하는 태그 내부에 첫째 자식으로 html코드를 삽입한다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class="movie">
                <div>컨저링</div>
                <div>쏘우</div>
            </div>
    		-----------------------------------------------------
            $(".xxx").prepend("<div>랑종</div>");
            -----------------------------------------------------
                class=movie가 가리키는 태그 안에 막내 자식으로 <div>랑종</div>
                를 삽입하기. 결국 아래 처럼 태그가 삽입된다.
            <div class="movie">
                <div>랑종</div>
                <div>컨저링</div>
                <div>쏘우</div>
            </div>

        -----------------------------------------------------
		<예>
		-----------------------------------------------------
            <div class="movie">
                <div>
                    <div>컨저링</div>
                    <div>쏘우</div>
                </div>
                <div>
                    <div>분노의 질주</div>
                    <div>데드풀</div>
                </div>
            </div>
        -----------------------------------------------------
		<문> 위에서 <div>데드풀</div> 태그 동생으로 <div>존윅3</div>을 삽입
		-----------------------------------------------------
        <정답>
        $(".movie div").eq(0).siblings().append("<div>존윅3</div>")
        
        $(".movie div:last").parent().append("<div>존윅3</div>")
        
        $(".movie :last").parent().append("<div>존윅3</div>")
        
        $(".movie>div").eq(1).append("<div>존윅3</div>")
        
        $(".movie div").eq(3).append("<div>존윅3</div>")

        <오답>
        $(".movie div").eq(1).append("<div>존윅3</div>")
        
        $(".movie div:eq1)").append("<div>존윅3</div>")

        $(".movie eq(1)").append("<div>존윅3</div>")
        // 화면에 변화가 없음
        $(".movie div:last").append("<div>존윅3</div>")
        
        $(".movie :last").append("<div>존윅3</div>")
        
        $(".movie div:contains('데드풀')").append("<div>존윅3</div>")
        
        $(".movie div:contains('데드풀')").parent().append("<div>존윅3</div>")
        

---------------------------------
after("html코드")           --19
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 밑 동생으로 html코드를 삽입한다.
    <주의>next()와 헷갈리지 말자
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
        <div class="cartoon">
			<div>사오정</div>
			<div>손오공</div>
			<div class=xxx>저팔계</div>
			<div>삼장법사</div>
		</div>
		-----------------------------------------------------
		$(".xxx").after("<div>짱구</div>");
		-----------------------------------------------------
        class=xxx가 가리키는 태그 다음으로 즉 밑 동생으로 <div>짱구</div>
        를 삽입하기. 결국 아래 처럼 태그가 삽입된다.
         <div class="cartoon">
			<div>사오정</div>
			<div>손오공</div>
			<div class=xxx>저팔계</div>
			<div>짱구</div>
            <div>삼장법사</div>
		</div>

---------------------------------
before("html코드")              --19,   
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 위 형으로 html코드를 삽입한다.
    <주의>prev()와 헷갈리지 말자
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
		<div class="cartoon">
			<div>사오정</div>
			<div>손오공</div>
			<div class=xxx>저팔계</div>
			<div>삼장법사</div>
		</div>
		-----------------------------------------------------
		$(".xxx").before("<div>짱구</div>");
		-----------------------------------------------------	
		class=xxx 가 가리키는 태그 다음으로 즉 위 형으로 <div>짱구</div>  를 삽입하기.
		결국 아래 처럼 태그가 삽입된다.
			<div class="cartoon">
				<div>사오정</div>
				<div>손오공</div>
				<div>짱구</div>
				<div class=xxx>저팔계</div>
				<div>삼장법사</div>
			</div>

---------------------------------
remove( )     - 방 없애         --18
---------------------------------
    현재 JQuery 객체가 관리하는 태그들을 삭제한다.
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
		<div class="cartoon">
			<div>사오정</div>
			<div>손오공</div>
			<div class=xxx>저팔계</div>
			<div>삼장법사</div>
		</div>
		-----------------------------------------------------
		$(".xxx").remove( );
		-----------------------------------------------------
            class=cartoon 가진 태그를 삭제한다. 그러므로 후손도 삭제된다.

---------------------------------
empty( )     - 방 비워          --18
---------------------------------
    현재 JQuery 객체가 관리하는 태그의 후손을 삭제한다.
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
		<div class="cartoon">
			<div>사오정</div>
			<div>손오공</div>
			<div class=xxx>저팔계</div>
			<div>삼장법사</div>
		</div>
		-----------------------------------------------------
		$(".xxx").empty( );
		-----------------------------------------------------
            class=cartoon 가진 태그의 후손 모드를 삭제한다. 
            class=cartoon 가진 놈은 남아있다.
            즉
            <div class="cartoon">
			<div>사오정</div>
			<div>손오공</div>
			<div class=xxx>저팔계</div>
			<div>삼장법사</div>
		</div>
        가
        <div class="cartoon"></div> 이렇게 된다.

---------------------------------
addClass("클래스명")     ***        --19
---------------------------------
    현재 JQuery 객체가 관리하는 태그에 class="클래스명"란 속성명과 속성값을 삽입
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
        <div>사오정</div>
    	-----------------------------------------------------
        $("div").addClass("cartoon");
    	-----------------------------------------------------
        <div>사오정</div> 태그 안에 class="cartoon"를 삽입하라.
        결국 <div>사오정</div> 가 <div class="cartoon">사오정</div>으로 바뀜
    	-----------------------------------------------------
        class 값이 삽입되면 좋은점
    	-----------------------------------------------------
            CSS가 와서 이쁘게 설정가능
            class 값이 생기므로 JQuery객체가 잡으로 오기 쉽다.

---------------------------------
removeClass("클래스명")         --18
---------------------------------
    현재 JQuery 객체가 관리하는 태그에 존재하는 class="클래스명"란 속성명과 속성값을 삭제
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
        <div class="cartoon">사오정</div>
    	-----------------------------------------------------
        $("div").addClass("cartoon");
    	-----------------------------------------------------
        <div>사오정</div> 태그 안에 class="cartoon"를 삽입하라.
        결국 <div class="cartoon">사오정</div> 가 <div>사오정</div>으로 바뀜
    	
---------------------------------
toggleClass("클래스명")   //toggle => 켰다 껏다[왔다 갔다]하다      --18,19
---------------------------------
    현재 JQuery 객체가 관리하는 태그에 class="클래스명"이 있다면 제거하고 없다면
    class="클래스명" 삽입

---------------------------------
attr("태그속성명") **********       --18
---------------------------------
    현재 JQuery 객체가 관리하는 태그에 태그속성명에 해당하는 속성값을 삭제
    -----------------------------------------------------
	<예>
	-----------------------------------------------------
		<input type="text" name="uid" class="uid">
            ---------------------------------------------
            var str = $(".uid).attr("name");
            ---------------------------------------------
                class=uid를 가진 태그의 name 속성값을 리턴해서 str변수에 저장

*********************************************
attr( "태그속성명", "태그속성값" )   *****      --19
*********************************************
	현재 JQuery 객체가 관리하는 태그에 태그속성명에 태그속성값을 삽입한다.
	-----------------------------------------------------
	<예>
	-----------------------------------------------------
		<input type="text" name="uid" class="uid">
			---------------------------------------------
			$(".uid").attr( "name", "user_id" );
			---------------------------------------------
				class=uid 를 가진 태그의 name 속성값을 "user_id" 로 수정하라



*********************************************
attr( {"태그속성명":"태그속성값","태그속성명":"태그속성값", ~}  )   *****       --19
*********************************************
	현재 JQuery 객체가 관리하는 태그에 여러개의 태그속성명에 태그속성값을 삽입한다.

*********************************************
removeAttr( "태그속성명" )                  --18
*********************************************
    현재 JQuery 객체가 관리하는 태그에 태그속성명과 태그속성값을 삭제한다.
        -----------------------------------------------------
		<예>
		-----------------------------------------------------
			<input type="text" name="uid" class="uid" size=100>
			---------------------------------------------
			$(".uid").removeAttr( "size");
			---------------------------------------------
				class=uid 를 가진 태그의 size 속성명과 속성값을  삭제한다.
				결론적으로 
				<input type="text" name="uid" class="uid" size=100>
				는 
				<input type="text" name="uid" class="uid">
				로 바뀌는 꼴이다.


*********************************************
prop( "DOM객체의속성변수명" )               --14
*********************************************
	현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들여 DOM 객체로 생성할 때 이 DOM 객체의 속성변수의 값을 리턴한다.
	//--------------------------------------------------
	<참고>주로 checkbox 입력양식 또는 radio  입력양식에 체크여부를 얻을 때 사용한다.
	//--------------------------------------------------
		//--------------------------------------------------
		<input type="checkbok" name="skill" value="JSP" class="skill">JSP
		<input type="checkbok" name="skill" value="ASP" class="skill">ASP
		<input type="checkbok" name="skill" value="PHP" class="skill">PHP
		//--------------------------------------------------
		<문제>ASP 의 체크여부를 얻을려면?
		//--------------------------------------------------
			var flag = $(".skill").filter("[value=ASP]").prop( "checked" )


*********************************************
prop( "DOM객체의속성변수명", "데이터" )         --17
*********************************************
	현재 JQuery 객체가 관리하는 태그를 웹브라우저가 읽어들여 DOM 객체로 생성할 때 
	이 DOM 객체의 속성변수에 데이터를 저장한다.
	//--------------------------------------------------
	<예>checkbox 입력양식 또는 radio  입력양식에 체크를 해주거나 체크를 뺄때 많이 사용한다.
	//--------------------------------------------------
		//--------------------------------------------------
		<input type="checkbok" name="skill" value="JSP" class="skill">JSP
		<input type="checkbok" name="skill" value="ASP" class="skill">ASP
		<input type="checkbok" name="skill" value="PHP" class="skill">PHP
		//--------------------------------------------------
		<문제>코딩으로  JSP 를 체크하려면?
		//--------------------------------------------------
			$(".skill").filter("[value=JSP]").prop( "checked", true );     **********


*********************************************
each( function(index){실행구문;} )   *********   
*********************************************
    현재 JQuery 객체가 관리하는 태그 들에 차례대로 접근해서 에  실행구문을 반복 실행한다.
		-----------------------------------------------------
		<예>
		-----------------------------------------------------
			<input type="text" name="mem_id" class="mem_id">
			<input type="text" name="mem_name" class="mem_name">
			<select name="addr" class="addr">
				<option value="서울">서울
				<option value="경기">경기
				<option value="인천">인천
				<option value="기타">기타
			</select>
		-----------------------------------------------------
        $(".mem_id,.mem_name,.addr").each(
            function(i){
                    //--------------------------------------------------------
                    // JQuery 객체가 관리하는 i번째 태그의 value 값을 얻어 변수 value에 저장하기
                    //--------------------------------------------------------
                    var value = $(this).val();
                    //--------------------------------------------------------
                    // JQuery 객체가 관리하는 i번째 태그의 name 값을 얻어 변수 value에 저장하기
                    //--------------------------------------------------------                    
                    var name = $(this).attr("name");
                    //--------------------------------------------------------
                    // 만약에 value값이 비어있거나 공백이면 경고하기
                    //--------------------------------------------------------
                    if( value.split(" ").join("")=="" )
                        alert("데이터가 비었습니다. 입력 또는 선택해 주세요")
            }
        );
		-----------------------------------------------------
        class=mem_id , class=mem_name, class=addr 를 가진 태그를 관리하는 JQuery] 객체를 생성
        EACH 메소드를 호출하여 function(i){실행구문} 익명함수의 실행구문을 실행한다.

this(--학생) 앞 뒤에 더블코트 없다.


*********************************************
hover( function(){실행구문1;}, function(){실행구문2;} )   *****
*********************************************
    현재 JQuery 객체가 관리하는 태그 들에 마우스를 대면 실행구문 1을 실행하고, 빼면 2를 실행하라.


*********************************************
index(  )
*********************************************
    현재 JQuery 객체가 관리하는 태그가 형제 태그들 중에 몇번째 인덱스 번호에 해당하는 지를 리턴한다.

*********************************************
index( 선택자2 )
*********************************************
    현재 JQuery 객체가 관리하는 태그에 CSS속성명에 CSS속성값을 설정하기

*********************************************
css( "css속성명", "css속성값"  )
*********************************************
    현재 JQuery 객체가 관리하는 태그에 CSS 속성값에 CSS 속성값을 설정하기
    <참고>  //css는 우리가 하는 분야와는 거리가 멀다고 본다(디자인의 영역)
    CSS (=Cascading Style Sheets)
        HTML 문서의 전반적인 [스타일]을 미리 저장해 둔 스타일시트다
        문서 전체의 일관성을 유지할 수 있고, 세세한 스타일 지정의 필요를 줄어들게 하였다.
        웹에서 스타일이란 모양새, 색상, 컨쳉트의 배치 등을 말한다.
        기존의 HTML은 웹 문서를 다양하게 설계하고 수시로 변경하는데 많은 제약이 따르는데,
        이를 보완하기 위해 만들어진 것이 스타일 시트이고 스타일 시트의 표준안이 바로 CSS이다.
        간단히 스타일 시트라고도 한다.
        CSS를 사용하면 보다 풍부한 디자인을 웹을 걸계할 수 있다.
        글자의 크기, 글자체, 줄간격, 배경 색상, 배열위치 등을 자유롭게 선택하건 변결할 수 있으며
        유지보수도 간편하게 할 수 있다.
            //---------------------------------------------------
            <예> HTMP 문서내에 아래와 같은 <STYLE>가 있을 경우
            //---------------------------------------------------
            //  <style>
                    .xxx{
                        text-decoration:none;
                        color:#cc0000;
                        font-style:italic;
                        font-weight:gold;
                    }

            </style>
            =====================================================
            class="xxx"를 가진 태그는
                    | 언더바 넣지마
                     color:#cc0000; 넣어
                     json글자색 두께는 두껍게 해줘
                     글자 두껜는 두껍벡 해줘
            =====================================================

        =====================================================
       CSS(
           {
               "css속성명":"css속성값"
               ,"css속성명":"css속성값"
               ,~
               ,"css속성명":"css속성값"
           }
       )
        ======================================================
        현재 JQuery 객체가 관리하는 태그에 n개의 css속성명에 n개의 css 속성값을 설정하기
        즉, css 메소드 한번 호출로 여러개의 css 설정할 수 있다.

*********************************************
hide( 속도, function( ){실행구문;}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 숨기게 한 후에 익명함수를 호출한다.
    <주의>가로세로 크기가 같은 비율로 작아지며 사라진다.
    <주의>매개변수로 들어오는 데이터가 둘다 생략될 수 있다.
    <주의>매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략 가능하다.
    <주의>속도는 n초*1000 dlek
    <주의>속도로 다음과 같은 문자로 써도 된다.
        "slow", "normal", "fast" (0.6초, 0.4초, 0.2초) 의 문자 입력 가능

*********************************************
show( 속도, function( ){실행구문;}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물이 웹화면에서 보이게 한다.
    hide(~)의 반대이다.
    매개변수 설명은 hide와 동일하다

*********************************************
fadeOut( 속도, function( ){실행구문;}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 서서히 투명해지면서 사라진 후 
    익명함수를 호출한다.
    <주의>매개변수로 들어오는 데이터가 둘다 생략될 수 있다.
    <주의>매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략 가능하다.

*********************************************
fadeIn( 속도, function( ){실행구문;}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 서서히 보이게 한 후 익명함수를 호출한다 
    fadeOut 메소드의 반대이다.

*********************************************
fadeTo( 속도, 투명도, function(){~}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 투명도에 맞게 투명하게 한 후에
    익명함수를 호출한다.

*********************************************
slideUp( 속도, function( ){실행구문;}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 슬라이딩 효과로 사라지게 한 후 
    익명함수를 호출한다.
    ▶ <주의> 세로 크기가 위로 줄어들며 사라진다.
    <주의>매개변수로 들어오는 데이터가 둘다 생략될 수 있다.
    <주의>매개변수로 들어오는 데이터가 하나만 생략된다면 익명함수만 생략 가능하다.

*********************************************
slideDown( 속도, function( ){실행구문;}  )
*********************************************
    slideUp의 반대 메소드이다.

*********************************************
animate( css설정, 속도, function( ){실행구문;}  )
*********************************************
    현재 JQuery 객체가 관리하는 태그의 출력물을 설정한 속도로 [css설정]을 하는 애니메이션을 일으킨 후

*********************************************
※
이벤트명( function(){실행구문;}  ) ******
*********************************************
    현재 JQuery 객체가 관리하는 태그에 아래와 같은 이벤트명에 해당하는 이벤트가 발생하면 
    실행구문을 실행한다.
    <예>
    ---------------------------------------------
    change( function(){실행구문;}  ) ******
    ---------------------------------------------
        현재 JQuery 객체가 관리하는 태그에 아래와 같은 change이벤트가 발생하면 실행구문을 실행한다.

        chickbox 또는 radio 라면 체크가 들어가거나 빠질때
        select 입력 양식이라면 바꿔 선택할 때
        키보드로 문자를 입력하는 입력양식이라면 기존에 들어있는 문자에 변경이 된 후
        커서를 뺄 때 로 인정한다.
    ---------------------------------------------
    click( function(){실행구문;}  ) ******
    ---------------------------------------------
        현재 JQuery 객체가 관리하는 태그에 클릭이벤트(=마우스왼쪽버튼누름)가 발생하면 실행구문을 실행한다.

*********************************************
이벤트명( )
=
trigger( "이벤트명" )
*********************************************
    현재 JQuery 객체가 관리하는 태그에 "이벤트명"에 해당하는 이벤트를 코딩으로 일으킨다.

    =========================================
    <예> <input type=button class="save_btn" value="저장" onClick="checkForm();">
    =========================================
    위 버튼 입력양식의 실행 결과물을 마우스 왼쪽 버튼을 클릭하면 checkForm() 함수를 호출한다는 태그이다.
    그런데 아래 코드가 실행되면 버튼을 마우스 왼쪽 버튼으로 클릭한 것과 동일한 효과를 낸다.
    $(".save_btn").click();


*********************************************
※
bind( "이벤트명", function( ){실행구문;}  )  ※와 같음  
*********************************************
    현재 JQuery 객체가 관리하는 태그에 "이벤트명"에 해당하는 이벤트가 발생하면 실행구문을 실행하도록 설정한다.
    =========================================
    <예>bind("click", function(){실행구문;})
    =========================================
        현재 JQuery 객체가 관리하는 태그에 클릭이벤트(=마우스왼쪽버튼누름)가 발생하면 실행구문을 실행한다.

********************************************
bind(
    "이벤트명1 이벤트명2 ~"
    ,function( ) {실행구문}
)
********************************************
    현재 JQuery 객체가 관리하는 태그에 "이벤트명"에 해당하는 이벤트가 여러개 발생하면 실행구문을 실행하도록 설정한다.
    =========================================
    <예>bind("keyup click", function(){실행구문;})
    =========================================
        현재 JQuery 객체가 관리하는 태그에 클릭이벤트 또는 키업 이벤트가 발생하면 실행구문을 실행한다.

********************************************
bind(
    "이벤트명1", function( ) {~},
    "이벤트명2", function( ) {~},
    "이벤트명3", function( ) {~},
    ~
)
********************************************        
    현재 JQuery 객체가 관리하는 태그에 각각의 "이벤트명"에 해당하는 이벤트 발생하면
                                     각각의 실행구문을 실행하도록 설정한다.

*********************************************
unbind( "이벤트명" )    이벤트 설정 제거
*********************************************
    현재 JQuery 객체가 관리하는 태그에 bind(~)로 메소드로 지정했던 이벤트를 지운다.
    즉, bind(~)로 메소드로 이벤트가 발생하면 실행할 코드를 unbind 메소드를 호출함으로써 
    실행할 코드를 무력화 시킨다.

*********************************************
one( "이벤트명", function(){~} )
*********************************************
    bind(~) 와 동일한 기능을 가진다
    -------------------------------------
    <주의>bind(~) 와 on(~) 차이점
    -------------------------------------
            버튼 입력양식을 클릭하면 bind 메소드로 설정한 익명함수가 호출될 경우
            이 버튼을 연달아 클릭하면 연달아 익명함수가 호출된다.
            ------------------------------------------------------------------
            버튼 입력양식을 클릭하면 one 메소드로 설정한 익명함수가 호출될 경우
            이 버튼을 연달아 클릭하면 처음 클릭할 때만 익명함수가 호출된다.
            ------------------------------------------------------------------
            네트워크가 느릴 때 게시판 글 저장 시 2회 이상 클릭하여
            bind(~)가 2회 이상 실행되면 여러 번 DB에 저장되므로 이럴 경우에는
            one(~)을 사용하면 중복 저장을 막을 수 있다.
            ------------------------------------------------------------------

*********************************************
toggle( function( ){실행구문1}, function(){실행구문2} )
*********************************************
    현재 JQuery 객체가 관리하는 태그 들에 클릭 이벤트가 홀수번째 발생하면 실행구문1을 실행하고
                                        클릭 이벤트가 짝수번째 발생하면 실행구문2을 실행한다.
                                        (마우스 왼쪽 버튼)
    --------------------------------------------------------------------------------------
    <주의> 아래 toggleClass 와 헷갈리지 말것
    --------------------------------------------------------------------------------------
    toggleClass( "클래스명" )   <참고>toggle => 켰다 껐다[왔다 갔다]
    --------------------------------------------------------------------------------------
        현재 JQuery 객체가 관리하는 태그에 class="클래스명"이 있다면 제거하고 
        없다면 class="클래스명" 삽입.

*********************************************
error( function( ){실행구문} )
*********************************************
    현재 JQuery 객체가 관리하는 이미지 관련 태그에 src 속성값의 이미지가 없을 경우 실행구문을 실행.
    이 실행구문은 주로 다른 이미지로 대체하던가 아니면 경고를 띄우는 등의 실행구문이다.
    ---------------------------------------
    <img src="존재하지 않는 이미지명">
    ---------------------------------------

*********************************************
focus()
*********************************************
    현재 JQuery 객체가 관리하는 태그에 포커스를 들인다.

*********************************************
blur()
*********************************************
    현재 JQuery 객체가 관리하는 태그에 포커스를 뺀다.

*********************************************
size()
*********************************************
    현재 JQuery 객체가 관리하는 태그의 개수를 리턴한다.
    length 라는 속성변수에도 태그의 개수가 들어있다.
    <주의>현재 JQuery 객체가 관리하는 태그가 없는 상태라면 0을 리턴한다.
    <주의>선택자 가르키는 태그가 없어도 JQuery 객체는 무조건 생성된다.
        그러므로 조건을 걸고 메소드 호출할 필요가 없다.
        즉, 객체 생성이 됐으면 메소드를 호출하라 라는 형식이 필요없다.

*********************************************
is( 선택자1 )
*********************************************
    현재 JQuery 객체가 관리하는 태그와 선택자1이 가르키는 태그가 같은 경우 true를 리턴한다.

*********************************************
hasClass( "클래스명" )
*********************************************
    현재 JQuery 객체가 관리하는 태그에 class="클래스명" 을 가지고 있으면 true 리턴.

*********************************************
disable(  )
*********************************************
    -------------------------------------------------
    현재 JQuery 객체가 관리하는 태그를 비활성화 시킨다.
    주로 입력양식의 태그를 무력화 시킬 때 사용한다.
    심지어 서버쪽으로 value 값이 전송되지도 않는다.
    -------------------------------------------------
    <참고>비활성화의 의미는 보이기는 하지만 기능을 발휘하지 못하는 상태
        예> <input type=text name=uid> 라는 입력양식이 비활성화 되면 보이기는 하나 커서가 못 들어간다.

*********************************************
serialize(  )    ****** 프로젝트에서 비동기 방식으로 서버와 통신할 때 사용할 예정
*********************************************
    ----------------------------------------------------------------------------
    현재 JQuery 객체가 관리하는 태그의 후손 중에 
    입력양식의 태그들의 name 값과 value 값을 모아서 아래와 같은 문자열 패턴으로 리턴한다.
    JQuery 객체가 관리하는 태그는 십중 팔구 form 태그이다.
    비동기 방식으로 웹서버와 통신할 때 유저가 입력. 선택한 데이터를 보낼 때 사용한다.
    ----------------------------------------------------------------------------

    ----------------------------------------------------------------------------
    "name값1=value1값 문자열의 인코딩 & name값1=value1값 문자열의 인코딩 & ~~~~"
    ----------------------------------------------------------------------------

---------------
<참고>encoding
---------------
        컴퓨터 등신이 통신이나 저장 목적으로 데이터를 부호화하는 것을 말한다.
        인코딩하기 위한 여러 기법들이 존재한다.
        전세계 모든 언어를 부호화할 수 있는 기법이 UTF-8 이다.
        <참고>EUC-KR 한글을 부호화하는 기법이다.

---------------
<참고>decoding
---------------
        인코딩된 것을 사람이 인지할 수 있는 문자로 복귀하는 것을 말한다.

---------------
<참고>비동기 방식
---------------
    웹하면의 이동없이 즉 웹페이지 이동없이 웹서버와 통신하는 것을 말한다.
    <예> 네이버에서 키워드 입력하면 관련 검색어 뜨기
    <예> 네이버에서 지도 밀기
    <예> 회원 가입 시 아이디 중복 체크

---------------
<참고>AJAX
---------------
    웹서버와 비동기 방식으로 통신한 결과를 현재 화면에 반영하는데 사용되는 기술을 말한다.
    AJAX 기술은 XMLHttpRequest 객체, DOM, 자바스크립트, CSS 기술

---------------
<예>
---------------
    ----------------------------------------------------------------------------
    <form name="memRegForm">
        아이디 : <input type="text" name="uid">         <br>
        암  호 : <input type="password" name="pwd">     <br>
        이  름 : <input type="text" name="uname">
    </form>
    ----------------------------------------------------------------------------
    위 html 소스의 실행 결과로 웹화면에 2개의 [문자열 입력상자]와 1개의 [암호 입력상자]가 보일 것이다.
    아이디는 abc123가 입력되고 암호는 1234, 이름이 사오정이 입력되었을 때,
    자스 코드 $("[name="memRegForm']").serialize() 가 실행되면

 "uid=abc123&pwd=1234&uname=%EC%82%AC%EC%98%A4%EC%A0%95"  문자열이 리턴된다.

---------------
$.trim( "문자열" )
---------------
    문자열에서 맨앞 또는 맨뒤 공백을 제거한 문자열 리턴
    $는 JQuery 라이브러리에 들어있는 병수이다.
    이 변수안에는 JQuery 객체가 저장되어 있다.
    이 객체는 태그를 관리하지는 않는다.
    <주의> $('선택자')는 달러 함수이고 선택자가 가르키는 태그를 관리하는 JQuery 객체를 생성하고 
     객체의 메모리 위치 주소값을 리턴한다.

*********************************************
$.map(   Array객체메위주 , function(value,index){ ~; return 값;}     )
*********************************************
    ------------------------------------------------------------------------------------
	Array 객체의 배열변수에 차례대로 접근해서 function(value,index){ ~ return 값;}를
	실행하여   return 값;  에 의해 리턴된 값을 새로운 Array 객체에 저장해 Array 객체의 메위주를 리턴
	익명함수의 매개변수 value, index 에는  i 번째 배열변수값, 배열변수 인덱스번호가 들어온다
    ------------------------------------------------------------------------------------
    <예>
    ------------------------------------------------------------------------------------
    var salarys = [9000, 7000, 5000]

    var real_salarys = $.map( salarys
    , function(value,index){
        return value*0.88;
    });
    위 real_salarys 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
    real_salarys[0] 에 9000*0.88 가 저장됨
    real_salarys[1] 에 7000*0.88 가 저장됨
    real_salarys[2] 에 5000*0.88 가 저장됨

*********************************************
$.grep(   Array객체메위주 , function(value,index){ ~; return boolean값;}     )
*********************************************
	Array 객체의 배열변수에 차례대로 접근해서 function(index,value){ ~ return boolean값;}를 
	실행하여 리턴된 값이 true일 경우의 Array 객체안의 배열변수 값만 모아 저장한 새로운 Array 객체의 메위주를 리턴한다.
	익명함수의 매개변수 value, index 에는  i 번째 배열변수값, 배열변수 인덱스번호가 들어온다
    ------------------------------------------------------------------------------------
    <예>
    ------------------------------------------------------------------------------------
    var nums = [1,4,7];
    var odd_nums = $.grep(
        nums
        , function(value, index){
            return value%2==1;
        }
    );
    ------------------------------------------------------------------------------------
    위 odd_nums 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
    odd_nums[0] 에 1가 저장됨
    odd_nums[1] 에 7가 저장됨
    ------------------------------------------------------------------------------------

*********************************************
$.merge( Array 객체메위주1, Array 객체메위주2 )
*********************************************    
    2개의 Array 객체안의 배열변수를 복사해서 붙여 새로운 Array 객체에 담아 객체의 메위주를 리턴
    ------------------------------------------------------------------------------------
    <예>
    ------------------------------------------------------------------------------------
    var kors = [51,71,91]
    var engs = [52,72,92]
    var tots = $.merge( kors, engs )
    ------------------------------------------------------------------------------------
    위 tots 에는 Array 객체가 저장되어 있고 배열변수에는 아래처럼 저장되어 있다.
    tots[0] 에 51 가 저장됨
    tots[1] 에 71 가 저장됨
    tots[2] 에 91 가 저장됨
    tots[3] 에 52 가 저장됨
    tots[4] 에 72 가 저장됨
    tots[5] 에 92 가 저장됨
    ------------------------------------------------------------------------------------

*********************************************
$.unique( Array 객체메위주 )
*********************************************
    Array 객체 안의 중복 데이터를 제거한다.
    단 이웃하고 있는, 붙어있는 중복데이터만 지운다.
    ------------------------------------------------------------------------------------
    <예>
    ------------------------------------------------------------------------------------
    var stu_no = [1,2,2,3,4,2];
    $.unique( stu_no );
    ------------------------------------------------------------------------------------
    위 stu_no 에 저장된 Array 객체의 배열변수에는 아래처럼 저장되어 있다.
    stu_no[0] 에 1가 저장됨
    stu_no[1] 에 2가 저장됨
    stu_no[2] 에 3가 저장됨
    stu_no[3] 에 4가 저장됨
    stu_no[4] 에 2가 저장됨
    ------------------------------------------------------------------------------------
    중복된 놈 모두 제거하기
    ------------------------------------------------------------------------------------
    var stu_no = [1,2,2,3,4,2]
    stu_no.sort();
    $.unique( stu_no );
    ------------------------------------------------------------------------------------
    새끼문제 회사 입사 문제 ********
     -- Array 객체안에 중복된 데이터를 제거하는 프로그램 작성하면? 단 JQuery 객체의 unique메소드 사용않기
    ------------------------------------------------------------------------------------
        var xxxs = [1,1,2,2,3,4,1,3,2]
        for( var i=0 ; i<xxxs.length-1 ; i++ ){
            for( var j=i+1 ; j<xxxs.length ; j++ ){
                if( xxxs[i]==xxxs[j] ){
                    xxxs.splice(j,1);
                    j--;
                }
            }
        }

    ---------------------------------------------------------------------------
	<세끼문제> 회사 입사 문제 ********
    기존 Array 객체에서 중복없이 배열변수안의 값을 복사해서 새로운 Array 객체에 저장하기
	---------------------------------------------------------------------------
		var xxxs = [1,1,2,2,3,4,1,3,2]
    		var new_xxxs = [ ];
				for( var i=0 ; i<xxxs.length ; i++ ){
					var cnt = 0;
					for( var j=0 ; j<new_xxxs.length ; j++ ){
						if( xxxs[i]==new_xxxs[j] ){
							cnt++;
						}
					}
					if( cnt==0 ) { new_xxxs.push( xxxs[i] ); }
				}

    
*********************************************
$.each( Array 객체메위주, function(index, value){ 실행구문 } )
*********************************************
    Array 객체의 배열변수에 차례대로 접근해서 실행구문을 반복 실행한다.

$(선택자).each( function(index,value){실행구문} ) 와 혼동하지 말것

*********************************************
$.each( {~:~,~:~,~:~}{사용자 정의 객체(JSON)}, function(index, value){ 실행구문 } )
*********************************************
    {~:~,~:~,~:~} 객체, 즉 JSON 또는 일회성사용자 정의 객체의 속성변수에 차례대로 접근해서
    function(key, value){~}를 실행한다.
    function(key, value){~} 에서 key는 속성변수명, value에는 속성값이 전달된다.

*********************************************
$.ajax(             ----1회성 사용자 정의 객체
    {
        url : "서버URL주소"
        ,type : "get" 또는 "post"
        ,data : "name값=value값&~" 또는 {name값:value값,~} 
        ,dataType : "서버가 응답한 페이지 종류"
        ,success : function( 버서의 응답물저장매개변수 ){       ********
            통신 선공 시 실행할 코드
        }
        ,error : function( ){
            통신 실패 시 실행할 코드
        }
    }
 )
*********************************************
        ---------------------------------------------------------------------
        웹서버와 비동기 통신하는 메소드이다. 리턴값은 없다.
        매개변수로 일회성 사용자 정의 객체가 전달된다.
        이 일회성 사용자 정의 객체 안의 속성변수에 위와 같이 여러 정보가 설정된다.
        ---------------------------------------------------------------------
        [서버URL주소]로 [get 또는 post] 방식으로 "name값=value값&~"  를 가지고  
		서버에 접속한 후 [서버의 응답]을 받으면 sucess에 저장된 익명함수를 호출한다.
		이때 익명함수의 매개변수로 전달되는 데이터는  서버가 전해준 DB 연동 결과물을 내포한 HTML 소스 이다.
		만약 [서버의 응답]을 받지 못하면, 즉 서버와 통신에 실패하면 속성변수 error 에 저장된 익명함수를 호출한다.

    ------------------------------------------------------------------------------------
    <예>
    ------------------------------------------------------------------------------------
        $.ajax(
            {
                url : "http://www.naver.com"
                ,type : "post"
                ,data : $("[name=memRegForm]").sarialize()
                ,dataType : "html"
                ,success : function( responseHTML ){
                    매개변수 responseHTML 안의 HTML 소스 문자열에 DB 연동 결과물을
                    뽑아 현재 화면에 반영하는 등의 소스가 나온다. **********
                }
                ,error : function( ){
                    alert("서버와 통신 실패! 관리자에게 문의 바람!")
                }
            }
        )


********************************************
$(document).on(
    "이벤트명"
    , "선택자"
    , function(){ 실행코드 }
)
********************************************
    [선택자]가 가리키는 기존 또는 추가 예정인 태그에 이벤트명에 해당하는 이벤트가 발생하면 
    실행코드를 실행한다.

********************************************
replaceWith( "HTML소스" )
********************************************
    현재 JQuery 객체가 관리하는 태그를 지정한 HTML소스 로 대체한다.
    즉, JQuery 객체가 관리하는 태그 없애고 HTML소스를 삽입한다.

    $(".XXX").html("<div>강명진 컴백</div>")

    -------------------------------------
    html("html소스") 메소드의 기능
    -------------------------------------
    <div class=xxx>
            임은지
    </div>
    -------------------------------------
    위 코드가 있는 상태에서 $(".XXX").html("<div>강명진 컴백</div>")가 실행되면 아래처럼 된다
    -------------------------------------
    <div class=xxx>
            <div>강명진 컴백</div>
    </div>
    -------------------------------------
    text는 '문자'자체를 덮어씌운다는 것에서 차이점이 있다.

*******************************************
wrap(선택자2)
*******************************************
        선택자2가 가르키는 태그를 복사해서 현재 JQuery 객체가 관리하는 태그를 감싼다.

    -------------------------------------
    예
    -------------------------------------
    <div class=action>
    나쁜녀석들
    </div>
    <div class=movie>
    </div>
    ----------------------------------
        위 코드가 있는 상태에서
        $(".xxx").wrap(".movie")
        가 실행되면 아래처럼 된다.
    ----------------------------------
    <div class=movie>
        <div class=action>
            나쁜 녀석들
        </div>
    </div>
    <div class=movie>
    </div>

*******************************************
load(선택자2)
*******************************************
    현재 JQuery 객체가 관리하는 태그 내부에 "*.html" 또는 "*.txt"안의 내용을 덮어쓴다.
    -------------------------------------
    예
    -------------------------------------
    $("#movie").load( "movie_info.txt" );

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<13> JQuery 객체의 속성변수의 종류?
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
*************************
length
*************************
    ----------------------------------
    현재 JQuery 객체가 관리하는 태그의 개수가 저장되어 있다.
    ----------------------------------
    <참고>메소드 size()의 리턴값도 현재 JQuery 객체가 관리하는 태그의 개수이다.
    ----------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<14> JQuery 객체의 메소드 중 JQuery 객체의 메위주를 리턴하는 메소드
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
$()

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<15> JQuery 객체의 메소드 중 문자열을 리턴하는 메소드
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
HTML
Text
val

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<16> JQuery 객체의 메소드 중 정수을 리턴하는 메소드
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<17> JQuery 객체의 메소드 중 true 또는 false를 리턴하는 메소드
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<18> JQuery 객체의 메소드 중 삭제의 기능, 무엇인가 없애는 기능을 사진 메소드
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
removeAttr

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
<19> JQuery 객체의 메소드 중 삽입 기능을 가진 메소드
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        
<주의> 아래 toggleClass와 헷갈리지 말것
*********************************************
toggleClass("클래스명")     <참고>toggle =



<form name=loginForm>
    <input type="text" name="uid" class="uid" size=10>
</form>


-----------------------------------------------------------------
var uid = $("[name=loginForm].uid").val();
var uid = $("[name='uid']").val();
-----------------------------------------------------------------
var uid = $(".uid").val();      ---     권유사항
val( )  => JQuery 객체가 관리하는 태그의 value 값을 리턴하는 메소드

int xxx = ddd.vvv().nnn;    int형 들어감

double xxx = ddd.vvv().nnn;  실수형 밑에 있는 자료형은 다 들어갈 수 있음

참조형(객체 메모리 위치 주소값) - ddd안에

$(".xxx).   메소드
$함수 호출
JQuery객체의 메위주가 리턴
    ''  는 class = xxx 을 가진 태그를 관리하고 있다.

var 변수명 = $(".xxx);
변수명.메소드()

JQuery에서 this에 대한 설명?(면접)
선택자(selector)
익명함수 안에서 JQuery 객체가 막 잡은 그 태그를 지칭하는 선택자
예 -> var obj = $("form table tr");
                obj.each(function(i)) {
                var.thisObj = $(this);
                });

블록체인 기술(입사시험 면접문제로 가끔 나올 수 있음)

a태그 끌어안은 컨텐츠 특징 --
클릭 가능. url주소일 경우 새롭게 열어줌.


입력양식

form, input, select, textarea, option
